import{P as i}from"./ProjectInfoComponent-DBU6mlMV.js";import{d as s,a as r,c as l,e as d,w as n,f as c,o as h,b as e,g as t}from"./index-VqrQqGco.js";const u=s({name:"DactylManuformProject",components:{ProjectInfo:i}}),g="/assets/13_full-lightup-complete-1KqS6Njj.jpg",p="/assets/00_pcb-base-DefJsgOU.jpg",m="/assets/choc_v1-CusPWOZQ.png",f="/assets/01_base-pcb-in-case-CohFS_dT.jpg",w="/assets/02_data-wire-complete-SKmI7DGN.jpg",y="/assets/03_all-wiring-complete-C_UBKkqW.jpg",b="/assets/04_microcontroller-added-B7pCmwT4.jpg",k="/assets/06_rgb-ligth-back-CkcLT7pj.jpg",_="/assets/07_rgb-light-front-D4tqFUKI.jpg",v="/assets/12_screen-added-TQClo4Pz.jpg",B="/assets/08_grey-wiring-complete-CZR1E9KA.jpg",I="/assets/09_both-sides-rgb-DUcLwffk.jpg",j="/assets/14_back-view-grey-CS2ov6ee.jpg";function D(C,o,T,M,E,L){const a=c("ProjectInfo");return h(),l("div",null,[d(a,{projectTitle:"Dactyl Manuform Build",githubLink:"https://github.com/98774/qmk_firmware.git"},{summary:n(()=>o[0]||(o[0]=[e("p",null,[t(" This project details the construction of a handwired Dactyl Manuform keyboard. The build features RGB lighting, a 3D-printed case, and a small LED display for real-time status updates. The firmware is powered by "),e("a",{href:"https://qmk.fm",target:"_blank"},"QMK"),t(", for customized keymaps, layers, and lighting effects. ")],-1),e("img",{class:"project-image",src:g,alt:"Fully lit keyboard with all features enabled"},null,-1)])),"detailed-description":n(()=>o[1]||(o[1]=[e("section",null,[e("h2",null,"Materials Used"),e("ul",null,[e("li",null,"3D-printed Dactyl Manuform case (STL files available online)"),e("li",null,"Mechanical key switches (e.g., Gateron, Cherry MX)"),e("li",null,"Keycaps"),e("li",null,"Microcontroller (Pro Micro or Elite-C)"),e("li",null,"WS2812 RGB LED strips"),e("li",null,"1N4148 diodes (one per switch)"),e("li",null,"Solid core wires"),e("li",null,"Soldering iron and solder"),e("li",null,"Multimeter"),e("li",null,"LED display")])],-1),e("section",null,[e("h2",null,"Overview"),e("p",null," After browsing online for a cheap split keyboard, I got fed up with the lack of low cost options. Eventually I decided to build my own. This project is the result of that decision. It took me around 40 hours of work total for assembly from parts to functioning keyboard. Of course, there was a lot of troubleshooting a long the way. ")],-1),e("section",null,[e("h2",null,"Build Process"),e("h3",null,"0. What am I doing?"),e("p",null," Having never built a keyboard before and only recently entering the custom keyboard space at all, I had no idea what I was doing. But Google is your friend :) and after a few hours of research I had a good idea of what I needed to do. Here is a (very) brief overview of how keyboards work. Each key is connected to a microcontroller through a matrix of wires. When a key is pressed, the microcontroller detects the change in the matrix and sends a signal to the computer. The computer then knows which key was pressed and can act accordingly. The microcontroller also controls the RGB lighting and any other features of the keyboard. If that sounds interesting, I go into more detail at the end of the page so feel free to read more there. "),e("p",null," After understanding the basics of how a keyboard works, I needed to decide on a layout. Eventually I decied the 4x5 layout would be a nice size. It would provide ample keys for each finger but would force me to use layering constantly to work effectively. My ultimate goal was to effectively use layers for my day-to-day navigation and computer needs. I also wanted to have a few keys for macros and other shortcuts. "),e("h3",null,"1. Wiring the PCB"),e("img",{class:"project-image",src:p,alt:"PCB base for the Dactyl Manuform keyboard"}),e("p",null,[t(" It's very possible to build a keyboard with just wires and diodes. But, I wanted RGB lighting and that adds an additional 3 wires to each key so in total I needed 5 wires per key. Managing that without a PCB would have been EXTREMELY tedious and probably wouldn't have worked as well. So, I researched and found a cheap PCB online. This proved the easy part. I found a version I liked called the Universal Toe Bean (I don't know either). The source for that is "),e("a",{href:"https://github.com/WainingForests/Universal-Toe-Beans.git",target:"_blank"},"here. ")]),e("img",{class:"project-image",src:m,alt:"The PCB I used: Universal Toe Beans PCB"}),e("p",null," I won't go into the PCB wiring in detail, but basically we need the R and C nodes for the rows and columns on the keys, and we need the DIN, VCC, and GND nodes for the RGB lighting. I'll explain these a bit as we go along. "),e("p",null," At it's core, we need to solder rows and columns to the microcontroller that we will use to run the whole PCB. Pretend our keyboard is a 3x3 grid. There are a couple of ways we could detect presses on a microcontroller. One solution is to connect every key to a pin on the microcontroller. This would work for our mini keyboard. We have 9 keys and we could use 9 pins. However, what would we do if we need 100+ keys? Our current microcontroller only has a dozen or so pins available. This is where the idea of scanning comes in. "),e("p",null,[t(" Computers are very fast"),e("sup",null,"[citation needed]"),t(". When a person pushes a button, they will hold it down for tens to hundreds of milliseconds. We don't need to detect the key press for that entire time. Instead we can scan all the keys every so often and see if any are pressed. So how does that help with pins? Imagine our 3x3 keyboard again. What if we used a wire for every row and a wire for every column. Now our keyboard only needs 6 wires instead of 9. ")]),e("p",null,"POST STILL IN PROGRESS... Look below for a badly written AI version :)"),e("img",{class:"project-image",src:f,alt:"PCB placed inside the keyboard case"}),e("img",{class:"project-image",src:w,alt:"Data wire connections complete"}),e("h3",null,"2. Completing All Wiring"),e("p"),e("img",{class:"project-image",src:y,alt:"All wiring complete for the keyboard"}),e("h3",null,"3. Microcontroller Installation"),e("p",null," The microcontroller was added and connected to the wiring. Verifying connections with a multimeter ensured there were no errors. "),e("img",{class:"project-image",src:b,alt:"Microcontroller added to the setup"}),e("h3",null,"4. RGB Lighting Setup"),e("p",null," RGB LED strips were installed on both sides of the keyboard. Testing the wiring at this stage prevented any lighting inconsistencies. "),e("img",{class:"project-image",src:k,alt:"Back view of RGB lighting installation"}),e("img",{class:"project-image",src:_,alt:"Front view of RGB lighting installation"}),e("h3",null,"5. Finishing Touches"),e("p",null," After wiring the keyboard matrix and LED strips, the LED display was added to show real-time keyboard layers and modifiers. The final assembly included aligning all components and verifying functionality. "),e("img",{class:"project-image",src:v,alt:"LED screen added to display keyboard status"})],-1),e("section",null,[e("h2",null,"Challenges"),e("h3",null,"1. Wiring Complexity"),e("p",null," Ensuring all wires were neatly routed and connected without overlapping or shorting was a challenge. Using solid core wires helped maintain order. "),e("img",{class:"project-image",src:B,alt:"Wiring completed, showing organized layout"}),e("h3",null,"2. RGB Data Chain Mapping"),e("p",null," Wiring the RGB LED data chain required precise planning. Misconnections resulted in incomplete lighting or flickering effects. "),e("img",{class:"project-image",src:I,alt:"RGB setup on both sides of the keyboard"}),e("h3",null,"3. Software Configuration"),e("p",null," Mapping the keyboard layout and LED effects in QMK firmware took some time. Reading through the documentation and testing configurations resolved issues. ")],-1),e("section",null,[e("h2",null,"Final Build"),e("p",null," The completed Dactyl Manuform keyboard features an ergonomic layout, customizable RGB lighting, and a functional LED display. This project demonstrates how hardware customization can enhance user experience. "),e("img",{class:"project-image",src:j,alt:"Back view of the completed keyboard"})],-1),e("section",null,[e("h2",null,"Challenges Faced (and Conquered!)"),e("h3",null,"1. RGB Data Chain Mapping"),e("p",null," Mapping out the RGB data chain felt like planning a heist. Every LED had to connect in the right order, or the lighting would glitch. A detailed diagram saved me from LED chaos. "),e("h3",null,"2. Defining the LED Matrix"),e("p",null," Translating physical key positions to software? Easier said than done. Defining the LED matrix in QMK meant aligning the virtual map with the real world—precision was key. "),e("h3",null,"3. Tracking Down Shorts"),e("p",null," Tiny wires, tiny solder points, big headaches. I ran into shorts more times than I’d like to admit. Testing each key with a multimeter became a ritual, but it paid off. "),e("h3",null,"4. QMK Configuration Madness"),e("p",null," Configuring QMK for RGB and power settings felt like learning a new language. There’s no shortcut—reading the docs and trial-and-error got me there. Worth it. "),e("h3",null,"5. Microcontroller Wire Chaos"),e("p",null," So. Many. Wires. Getting everything soldered to the microcontroller without turning it into spaghetti required patience and a good labeling system. "),e("h3",null,"6. Mastering the LED Display"),e("p",null," Getting the LED display to show layers and modifiers was a puzzle. But after diving deep into the docs, it’s like having a live status monitor. No more guessing which layer I'm on! ")],-1)])),_:1})])}const R=r(u,[["render",D],["__scopeId","data-v-f900f39a"]]);export{R as default};
